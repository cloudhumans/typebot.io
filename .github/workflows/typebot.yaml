name: Typebot CI

on:
  push:
    branches:
      - main
      - feat/run-typbot-migration-on-github

env:
  AWS_REGION: us-east-1
  ECR_BUILDER_REPOSITORY: typebot-builder
  ECR_VIEWER_REPOSITORY: typebot-viewer
  ECR_REGISTRY: 585814034319.dkr.ecr.us-east-1.amazonaws.com

jobs:
  prepare-matrix:
    name: Prepare migration matrix
    if: ${{ github.ref == 'refs/heads/feat/run-typbot-migration-on-github' }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
      count: ${{ steps.build-matrix.outputs.count }}
    steps:
      - name: Configure AWS credentials production
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CI_EKS_PRODUCTION_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CI_EKS_PRODUCTION_SECRET }}
          aws-region: us-east-1

      - name: Fetch SSM parameter & build matrix JSON
        id: build-matrix
        env:
          SSM_PARAM_NAME: '/prd/typebot/databases'
        run: |
          set -euo pipefail
          echo "Reading SSM parameter: $SSM_PARAM_NAME"
          RAW=$(aws ssm get-parameter --name "$SSM_PARAM_NAME" --with-decryption --query 'Parameter.Value' --output text || true)
          if [ -z "$RAW" ]; then
            echo "No content in parameter" >&2
            echo 'matrix={"include":[]}' >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Building matrix... (content redacted)"
          JSON_ITEMS="[]"
          # Use jq if available; otherwise fall back to manual assembly
          if ! command -v jq >/dev/null 2>&1; then
            echo "jq not found. Downloading locally..."
            curl -sSL https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64 -o jq && chmod +x jq
            PATH="$PWD:$PATH"
          fi
          # Filter valid lines and turn into JSON objects
          # Supports passwords containing '=' by using parameter expansion
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            case "$line" in \#*) continue;; esac
            case "$line" in *=*) : ;; *) continue;; esac
            NAME=${line%%=*}
            CONN=${line#*=}
            [ -z "$CONN" ] && continue
            case "$CONN" in
              postgresql://*|postgres://*) : ;;
              *) echo "Skipping $NAME (invalid protocol)" >&2; continue;;
            esac
            OBJ=$(jq -nc --arg name "$NAME" --arg connection "$CONN" '{name:$name,connection:$connection}')
            JSON_ITEMS=$(jq -nc --argjson arr "$JSON_ITEMS" --argjson obj "$OBJ" '$arr + [$obj]')
          done <<< "$RAW"
          MATRIX=$(jq -nc --argjson inc "$JSON_ITEMS" '{include:$inc}')
          COUNT=$(echo "$MATRIX" | jq '.include | length')
          echo "Matrix count: $COUNT" >&2
          if [ "$COUNT" -gt 0 ]; then
            echo "Instances included:" >&2
            echo "$MATRIX" | jq -r '.include[] | " - " + .name' >&2
          fi
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"

  migrate:
    name: Migrate (per instance)
    if: ${{ github.ref == 'refs/heads/feat/run-typbot-migration-on-github' && needs.prepare-matrix.outputs.count != '0' }}
    needs: prepare-matrix
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    runs-on: [self-hosted, production]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.4
          run_install: false

      - name: Install dependencies (prisma only)
        run: |
          set -euo pipefail
          pnpm install --frozen-lockfile --filter @typebot.io/prisma... || pnpm install --frozen-lockfile

      - name: Test connection
        if: false
        env:
          INSTANCE_NAME: ${{ matrix.name }}
          CONNECTION: ${{ matrix.connection }}
        run: |
          set -euo pipefail
          IMAGE=postgres:17-alpine
          echo "Pulling $IMAGE..."
          docker pull "$IMAGE"
          echo "Testing Postgres connection to instance $INSTANCE_NAME (using official image)..."
          # Usando SELECT 1 para teste rÃ¡pido; troque para SELECT now() se quiser timestamp.
          docker run --rm "$IMAGE" \
            psql "$CONNECTION" -v ON_ERROR_STOP=1 -c 'SELECT 1;'

      # - name: Run migration
      #   if: false
      #   env:
      #     INSTANCE_NAME: ${{ matrix.name }}
      #     CONNECTION: ${{ matrix.connection }}
      #   run: |
      #     set -euo pipefail
      #     if [ -z "${CONNECTION:-}" ]; then
      #       echo "Empty connection for $INSTANCE_NAME" >&2
      #       exit 1
      #     fi

      #     echo "Running migration for instance: $INSTANCE_NAME"
      #     DATABASE_URL="$CONNECTION" pnpm --filter @typebot.io/prisma exec prisma migrate deploy --schema=packages/prisma/postgresql/schema.prisma
      #     echo "Migration done for $INSTANCE_NAME"

  build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials production
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_CI_EKS_PRODUCTION_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_CI_EKS_PRODUCTION_SECRET }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Compute version
        uses: cloudhumans/actions/app-version@v1
        with:
          version_file: version
          format: '{base}-{sha7}'

      - name: Build, tag, and push BUILDER image to Amazon ECR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG --build-arg SCOPE=builder .
          docker push $ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push VIEWER image to Amazon ECR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG --build-arg SCOPE=viewer .
          docker push $ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG

      - name: install kubectl and kustomize
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          curl -sfLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.1.1/kustomize_v4.1.1_linux_amd64.tar.gz && tar -xvf kustomize.tar.gz && chmod u+x kustomize
          curl -LO "https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl" && chmod u+x kubectl

      - name: export common variables
        run: |
          echo "KUSTOMIZE_CMD=$PWD/kustomize" >> $GITHUB_ENV
          echo "KUBECTL_CMD=$PWD/kubectl" >> $GITHUB_ENV

      - name: Deploy in production
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          pushd deploy/base
          $KUSTOMIZE_CMD edit set image typebot-builder-image="$ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG"
          $KUSTOMIZE_CMD edit set image typebot-viewer-image="$ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG"
          popd
          aws eks --region us-east-1 update-kubeconfig --name kubernetes-production
          $KUSTOMIZE_CMD build deploy/overlays/prd
          $KUSTOMIZE_CMD build deploy/overlays/prd | $KUBECTL_CMD apply -f -

      - name: Deploy instace2 in production
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          pushd deploy/base
          $KUSTOMIZE_CMD edit set image typebot-builder-image="$ECR_REGISTRY/$ECR_BUILDER_REPOSITORY:$IMAGE_TAG"
          $KUSTOMIZE_CMD edit set image typebot-viewer-image="$ECR_REGISTRY/$ECR_VIEWER_REPOSITORY:$IMAGE_TAG"
          popd
          aws eks --region us-east-1 update-kubeconfig --name kubernetes-production
          $KUSTOMIZE_CMD build deploy/overlays/prd-instance2
          $KUSTOMIZE_CMD build deploy/overlays/prd-instance2 | $KUBECTL_CMD apply -f -
